[Bulletin Board]

* 사전준비
1) 파워포인트를 이용해 테마 정하기
- 내가 만들고자 하는 화면을 그려보기
2) 줄거리 나누기
- 큰 흐름 작성

(보여주기) 화면이 로드되면, 기존에 작성된 리스트를 보여준다.
한 페이지에 5개의 글만 보여준다. (limit = 5) 
한 줄에 “번호, 제목, 작성일, 조회수”를 보여준다.
(보기) 해당 글을 클릭하면 “제목, 내용”을 보여주고, “수정” “삭제” 버튼이 있다.
(수정) 기존에 썼던 글을 수정할 수 있다.
수정 버튼을 클릭하면 수정창이 열린다. 
제목, 내용을 수정할 수 있다.
수정한 날짜로 “작성일”이 변경된다.
우측 하단에 “저장” 버튼이 있다.
(생성) 새 글을 작성할 수 있다.
메인 페이지 우측 하단에 “쓰기”버튼을 클릭하면 새로운 창이 열린다.
“제목, 내용”을 적는다.
우측 하단에 “저장” 버튼이 있다.
작성일이 자동으로 저장된다.
(검색) 제목(or 제목+내용)으로 검색할 수 있다.
아래 검색 창, 검색 버튼이 있다.

3) 시나리오 작성
- 세부사항 작성
4) 플로우차트 작성
- 순서도(각 기능을 쪼개서 해놓으면 좋다)
----------------------------------------------
* vsCode에서 기본 환경 설정
**Backend
1. vsCode에서 Open Folder
내 프로젝트 폴더 열기
(나는 study > bulletinBoard 폴더를 만들어놨었고, 그 폴더를 열었다)

2. 터미널에서 입력
터미널 실행 : ctrl `(백틱)

2-1. npm i -g @nestjs/cli

2-2. nest new bulletinBoardBackend
(npm이 패키지 매니저 인가봐)

2-3. 위에 폴더로 경로를 이동한 후에, CRUD 자동생성을 위한 입력
(나는  study > bulletinBoard > bulltetinBoardBackend 로 들어옴)
nest g resource bulletinBoard >> REST API >> yes
(폴더에서, src > bulletin-board 이렇게 들어가 있어야 함)

2-4. npm run start:dev 실행후, localhost:3000했을 때 Hello World!가 잘 나오면 성공

**Front-end
3. 내 파일, backend 폴더 있는 쪽에서 (직접) 폴더를 만든다.
bulletin-board-frontend 폴더 만들기 (일부러 백엔드와 비슷한 이름으로 지음)

3-1. 그 안에 3개의 파일 (직접) 만들기
bulletinBoard.css / bulletinBoard.html / bulletinBoard.js

3-2. .html 파일 안에 ! 자동완성으로 뼈대만들기
!

3-3. 그리고 웹페이지가 열리는지 확인

**DB
4-1. typeORM 설치를 위해 .package.json이 있는 backend 폴더에서 install
npm install --save @nestjs/typeorm typeorm mysql2
(나는 bulletinBoardBackend 경로에서 설치함)
(typeORM은 프로젝트를 새로 할 때마다 설치를 해줘야 하고, package.json에 설치는 하는 것이기에 거기서 해줘야 한다)
(이걸 작성해야 Entity, Column등 자동입력됨)

4-2. vsCode 껐다 켜기
그래야지 아래 작업 가능

4-3. entities > bulletin-board.entity.ts 에서 필요한 @Entity(), @Column()들 작성

import { Column, Entity, PrimaryGeneratedColumn } from "typeorm";

@Entity()
export class BulletinBoard {
    @PrimaryGeneratedColumn()
    id : number
    
    @Column()
    title : string

    @Column()
    content : string

    @Column()
    date : Date

    @Column()
    views : number
}

4-4. app.module.ts
서버랑 연결되게 정보들 입력, 아래 것들 입력하면 위에 자동 import

@Module({
  imports: [
    TypeOrmModule.forRoot({
      type: 'mysql',            // oracle, mysql, mssql, mongodb, sqlite
      host: 'localhost',        // 접속할 디비 ip
      port: 3306,               // 접속할 디비 port
      username: 'root',         // 접속 계정 이름
      password: '1234',         // 비번
      database: 'test',         // 데이터 베이스 이름
      synchronize: true,        // orm 기능 중 하난데 entity 기반으로 테이블이나 컬럼등을 자동으로 추가/수정함
      logging: true,            // 실행되는 쿼리를 콘솔에 보여주는 기능
      entities: [BulletinBoard] // 사용될 엔티티 등록 - .entity.ts에 있음
    })
    , BulletinBoardModule],

4-5. bulletinboard.service 에서 Repository 만들어주기
(create()함수 위에 작성)

import { BulletinBoard } from './entities/bulletin-board.entity';
import { Repository } from 'typeorm';

@Injectable()
export class BulletinBoardService {
  constructor(
    @InjectRepository(BulletinBoard)
    private boardRepository:Repository<BulletinBoard>
  ){}

(import { Repository } 부분은 내가 직접 타이핑, 쳤다
constructor부터~ 내가 직접 쳤다)

4-6. bulletin-board.module.ts에서 아래 코드 직접 타이핑, 치기
import { BulletinBoard } from './entities/bulletin-board.entity';
import { TypeOrmModule } from '@nestjs/typeorm';

@Module({
  imports: [TypeOrmModule.forFeature([BulletinBoard])],

4-7. main.ts > bootstrap() 함수 안에 아래 코드 작성
app.enableCors()

4-8. 이렇게 한 후에 npm run start:dev 해서 DBeaver를 확인해보면 테이블이 잘 만들어진 것을 볼 수 있고, html도 실행해보면 잘 되는 것을 볼 수 있다

**Git
5. 깃허브에 repository를 하나 만든다
create a new repository 에서 bulletin_board라고 적고 그냥 create!

5-1. 그 깃허브 주소를 복사한다.

5-2. 내가 원하는 부분에 우클릭, Git Bash를 켜서 .git init을 입력하면
자동으로 .git이 생성됨
( .git이 있는 곳이 깃에 올라가는 부분이다)
(나는 한 프로젝트 안에 F&B를 다 올리고 싶으니까 front & back 둘을 묶고 있는 곳, 폴더 밖에 하려고 한다)

5-3. extensions 에서 Open repository >> Browse >> .git이 있는 폴더로 이동
( 맨 처음 뜨는 창 무시(OK) )
remotes 상태는 연결이 안됐다는 의미

5-4. 왼쪽 폴더창? 같은 곳에서 Remotes 우클릭 >> Manage >>
Name: origin
url : [내가 git에서 만든 Git repository 주소 복붙]

5-5. 그러면 Remotes 아래에 origin이 생긴 걸 확인할 수 있다.
그 후에 commit / push 
